generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  name            String?         @db.VarChar(255)
  email           String          @unique @db.VarChar(255)
  profilePicUrl   String?
  githubUrl       String?
  linkedinUrl     String?
  personalSiteUrl String?
  selfIntro       String?
  password        String          @unique @db.VarChar(255)
  administrator   Administrator[]
  adviser         Adviser[]
  facilitator     Facilitator[]
  mentor          Mentor[]
  student         Student[]
  tutor           Tutor[]
}

model Cohort {
  startDate    DateTime?
  endDate      DateTime?
  academicYear Int           @id
  Adviser      Adviser[]
  Facilitator  Facilitator[]
  Mentor       Mentor[]
  projects     Project[]
  Student      Student[]
  Tutor        Tutor[]
  Deadline     Deadline[]
}

model Student {
  id         Int      @id @default(autoincrement())
  userId     Int
  teamId     Int?
  nusnetId   String?  @unique @db.VarChar(40)
  matricNo   String?  @unique @db.VarChar(40)
  cohortYear Int
  cohort     Cohort   @relation(fields: [cohortYear], references: [academicYear])
  project    Project? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cohortYear])
}

model Adviser {
  id         Int       @id @default(autoincrement())
  userId     Int
  cohortYear Int
  cohort     Cohort    @relation(fields: [cohortYear], references: [academicYear])
  user       User      @relation(fields: [userId], references: [id])
  projects   Project[]

  @@unique([userId, cohortYear])
}

model Mentor {
  id         Int       @id @default(autoincrement())
  userId     Int
  cohortYear Int
  cohort     Cohort    @relation(fields: [cohortYear], references: [academicYear])
  user       User      @relation(fields: [userId], references: [id])
  projects   Project[]

  @@unique([userId, cohortYear])
}

model Facilitator {
  id         Int    @id @default(autoincrement())
  userId     Int
  cohortYear Int
  cohort     Cohort @relation(fields: [cohortYear], references: [academicYear])
  user       User   @relation(fields: [userId], references: [id])

  @@unique([userId, cohortYear])
}

model Tutor {
  id         Int    @id @default(autoincrement())
  userId     Int
  cohortYear Int
  cohort     Cohort @relation(fields: [cohortYear], references: [academicYear])
  user       User   @relation(fields: [userId], references: [id])

  @@unique([userId, cohortYear])
}

model Administrator {
  userId    Int
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, startDate, endDate])
}

model Project {
  id           Int              @id @default(autoincrement())
  name         String
  adviserId    Int?
  mentorUserId Int?
  achievement  AchievementLevel
  cohortYear   Int
  adviser      Adviser?         @relation(fields: [adviserId], references: [id])
  cohort       Cohort           @relation(fields: [cohortYear], references: [academicYear])
  mentor       Mentor?          @relation(fields: [mentorUserId], references: [id])
  students     Student[]
}

model Deadline {
  id         Int          @id @default(autoincrement())
  name       String
  cohort     Cohort       @relation(fields: [cohortYear], references: [academicYear])
  cohortYear Int
  createdOn  DateTime
  dueBy      DateTime
  type       DeadlineType

  Questions Question[]
  @@unique([name, cohortYear])
}

model Question {
  id             Int          @id @default(autoincrement())
  deadline       Deadline     @relation(fields: [deadlineId], references: [id])
  deadlineId     Int
  questionNumber Int
  question       String
  type           QuestionType

  Answer Answer[]
  Option Option[] //for MCQ/Multi-select questions
  @@unique([deadlineId, questionNumber])
}

model Option {
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  option     String

  @@unique([questionId, option])
}

model Answer {
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answer     String

  @@id([questionId, answer])
}

enum DeadlineType {
  Liftoff
  Splashdown
  MilestoneOne
  MilestoneTwo
  MilestoneThree
  Evaluation
  Feedback
  Survey
  Other
}

enum QuestionType {
  ShortAnswer
  LongAnswer
  MultiSelect
  Url
  MultipleChoice
}

enum AchievementLevel {
  Vostok
  Gemini
  Apollo
  Artemis
}

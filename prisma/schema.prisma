generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  name            String?         @db.VarChar(255)
  email           String          @unique @db.VarChar(255)
  profilePicUrl   String?
  githubUrl       String?
  linkedinUrl     String?
  personalSiteUrl String?
  selfIntro       String?
  password        String          @db.VarChar(255) //Hashed
  administrator   Administrator[]
  adviser         Adviser[]
  mentor          Mentor[]
  student         Student[]
  submitterId     Int?
  submitted       Submission[]    @relation("from_user")
  received        Submission[]    @relation("to_user")
}

model Cohort {
  startDate    DateTime?
  endDate      DateTime?
  academicYear Int        @id
  advisers     Adviser[]
  mentors      Mentor[]
  projects     Project[]
  students     Student[]
  deadlines    Deadline[]
}

model Student {
  id         Int      @id @default(autoincrement())
  userId     Int
  projectId  Int?
  nusnetId   String?  @unique @db.VarChar(40)
  matricNo   String?  @unique @db.VarChar(40)
  cohortYear Int
  cohort     Cohort   @relation(fields: [cohortYear], references: [academicYear])
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cohortYear])
}

model Adviser {
  id         Int       @id @default(autoincrement())
  userId     Int
  nusnetId   String?
  matricNo   String?
  cohortYear Int
  cohort     Cohort    @relation(fields: [cohortYear], references: [academicYear])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects   Project[]

  EvaluationGroup EvaluationGroup[]

  @@unique([userId, cohortYear])
}

model Mentor {
  id         Int       @id @default(autoincrement())
  userId     Int
  cohortYear Int
  cohort     Cohort    @relation(fields: [cohortYear], references: [academicYear])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects   Project[]

  @@unique([userId, cohortYear])
}

model Administrator {
  id        Int      @id @default(autoincrement())
  userId    Int
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id                Int              @id @default(autoincrement())
  name              String
  adviserId         Int?
  mentorUserId      Int?
  achievement       AchievementLevel
  cohortYear        Int
  adviser           Adviser?         @relation(fields: [adviserId], references: [id])
  cohort            Cohort           @relation(fields: [cohortYear], references: [academicYear])
  mentor            Mentor?          @relation(fields: [mentorUserId], references: [id])
  students          Student[]
  proposalPdf       String?
  teamName          String?
  hasDropped        Boolean          @default(false)
  EvaluationGroup   EvaluationGroup? @relation(fields: [evaluationGroupId], references: [id])
  evaluationGroupId Int?
  submitted         Submission[]     @relation(name: "from_project")
  received          Submission[]     @relation(name: "to_project")

  @@unique([name, cohortYear])
}

model Deadline {
  id         Int          @id @default(autoincrement())
  name       String
  cohort     Cohort       @relation(fields: [cohortYear], references: [academicYear])
  cohortYear Int
  createdOn  DateTime     @default(now())
  dueBy      DateTime
  desc       String?
  type       DeadlineType
  updatedAt  DateTime     @updatedAt
  sections   Section[]

  @@unique([name, cohortYear])
}

model Section {
  id            Int        @id @default(autoincrement())
  name          String
  desc          String?
  sectionNumber Int
  deadline      Deadline   @relation(fields: [deadlineId], references: [id], onDelete: Cascade)
  deadlineId    Int
  questions     Question[]

  @@unique([deadlineId, sectionNumber])
}

model Question {
  id             Int          @id @default(autoincrement())
  questionNumber Int
  question       String
  desc           String
  type           QuestionType
  isAnonymous    Boolean      @default(false)
  answers        Answer[]
  options        Option[] //for MCQ/Multi-select questions
  section        Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId      Int
}

model Option {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  option     String
  order      Int

  @@unique([questionId, order])
}

model EvaluationGroup {
  id        Int       @id @default(autoincrement())
  adviser   Adviser   @relation(fields: [adviserId], references: [id])
  adviserId Int
  projects  Project[]
}

model Submission {
  id            Int      @id @default(autoincrement())
  Answer        Answer[]
  isDraft       Boolean  @default(true)
  updatedAt     DateTime @updatedAt
  fromUser      User?    @relation(fields: [fromUserId], references: [id], name: "from_user")
  toUser        User?    @relation(fields: [toUserId], references: [id], name: "to_user")
  fromProject   Project? @relation(fields: [fromProjectId], references: [id], name: "from_project")
  toProject     Project? @relation(fields: [toProjectId], references: [id], name: "to_project")
  fromUserId    Int?
  toUserId      Int?
  fromProjectId Int?
  toProjectId   Int?
}

model Answer {
  submission   Submission @relation(fields: [submissionId], references: [id])
  question     Question   @relation(fields: [questionId], references: [id])
  questionId   Int
  answer       String
  submissionId Int

  @@id([submissionId, questionId, answer])
}

enum DeadlineType {
  Milestone
  Evaluation
  Survey
  Other
}

enum QuestionType {
  ShortAnswer
  Paragraph
  MultipleChoice
  Checkboxes
  Dropdown
  Url
  Date
  Time
}

enum AchievementLevel {
  Vostok
  Gemini
  Apollo
  Artemis
}
